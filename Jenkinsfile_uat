pipeline {
	agent any

	environment {
		// Application configuration
		APP_NAME = 'survey-app'

		// Application port
		APP_PORT = '5174'

		ADMIN_USERNAME = 'admin'
		ADMIN_PASSWORD = 'password'

		// AWS S3 configuration
		AWS_DEFAULT_REGION = 'ap-southeast-2'
		CLIENT_S3_BUCKET = 'uat.sigmaq.co'
		SUPER_ADMIN_S3_BUCKET = 'uat.sigmaq.co.admin'
	}

	stages {
		stage('Checkout') {
			steps {
				echo 'Checking out source code...'
				checkout scm
			}
		}

		stage('Build Client') {
			steps {
				echo 'Building client application...'
				dir('client') {
					sh '''
						echo "=== Installing client dependencies ==="
						npm install

						echo "=== Building client application ==="
						npm run build

						echo "=== Verifying build output ==="
						if [ -d "dist" ]; then
							echo "✓ Client build successful"
							ls -la dist/
						else
							echo "✗ Client build failed - dist directory not found"
							exit 1
						fi
					'''
				}
			}
		}

		stage('Build Super Admin') {
			steps {
				echo 'Building super admin application...'
				dir('super-admin') {
					sh '''
						echo "=== Installing super admin dependencies ==="
						npm install

						echo "=== Building super admin application ==="
						npm run build

						echo "=== Verifying build output ==="
						if [ -d "dist" ]; then
							echo "✓ Super admin build successful"
							ls -la dist/
						else
							echo "✗ Super admin build failed - dist directory not found"
							exit 1
						fi
					'''
				}
			}
		}

		stage('Deploy to S3') {
			steps {
				echo 'Deploying frontend applications to S3...'
				withVault([
					configuration: [
						timeout: 60,
						vaultCredentialId: 'Vault Credential',
						vaultUrl: 'https://vault.jiangren.com.au'
					],
					vaultSecrets: [[
						path: 'secret_aws/aws_uat',
						secretValues: [
							[vaultKey: 'AWS_ACCESS_KEY_ID'],
							[vaultKey: 'AWS_SECRET_ACCESS_KEY']
						]
					]]
				]) {
					script {
						parallel(
							'Deploy Client to S3': {
								dir('client') {
									sh '''
										echo "=== Deploying client to S3 ==="
										export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
										export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
										export AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}"

										aws s3 sync dist/ s3://${CLIENT_S3_BUCKET}/ --delete

										echo "=== Setting S3 website configuration ==="
										aws s3 website s3://${CLIENT_S3_BUCKET}/ --index-document index.html

										echo "=== Setting S3 bucket policy for public access ==="
										cat > bucket-policy.json << 'POLICY_EOF'
											{
												"Version": "2012-10-17",
												"Statement": [
													{
														"Sid": "PublicReadGetObject",
														"Effect": "Allow",
														"Principal": "*",
														"Action": "s3:GetObject",
														"Resource": "arn:aws:s3:::${CLIENT_S3_BUCKET}/*"
													}
												]
											}
											POLICY_EOF
										aws s3api put-bucket-policy --bucket ${CLIENT_S3_BUCKET} --policy file://bucket-policy.json || echo "Warning: Failed to set bucket policy"

										echo "✅ Client deployed successfully to S3"
									'''
								}
							},
							'Deploy Super Admin to S3': {
								dir('super-admin') {
									sh '''
										echo "=== Deploying super admin to S3 ==="
										export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
										export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
										export AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}"

										# 直接部署到S3根目录，因为现在base路径是/
										aws s3 sync dist/ s3://${SUPER_ADMIN_S3_BUCKET}/ --delete

										echo "=== Setting S3 website configuration ==="
										aws s3 website s3://${SUPER_ADMIN_S3_BUCKET}/ --index-document index.html

										echo "=== Setting S3 bucket policy for public access ==="
										cat > bucket-policy.json << 'POLICY_EOF'
										{
											"Version": "2012-10-17",
											"Statement": [
												{
													"Sid": "PublicReadGetObject",
													"Effect": "Allow",
													"Principal": "*",
													"Action": "s3:GetObject",
													"Resource": "arn:aws:s3:::${SUPER_ADMIN_S3_BUCKET}/*"
												}
											]
										}
										POLICY_EOF
										aws s3api put-bucket-policy --bucket ${SUPER_ADMIN_S3_BUCKET} --policy file://bucket-policy.json || echo "Warning: Failed to set bucket policy"

										echo "✅ Super admin deployed successfully to S3"
									'''
								}
							}
						)
					}
				}
			}
		}
		stage('Build and Deploy Backend') {
			steps {
				echo 'Building and deploying backend service...'
				withVault([configuration: [ vaultUrl: 'https://vault.jiangren.com.au', vaultCredentialId: 'Vault Credential', timeout: 120],
					vaultSecrets: [[path: 'jr-survey/uat',
						secretValues: [
							[vaultKey: 'MONGO_URI']
						]
					]]
				]) {
					script {
						echo "Environment variables loaded from Vault"
						echo "MONGO_URI: ${MONGO_URI}"

						// Use UAT compose file
						def composeFile = 'docker-compose.uat.yml'
						echo "Using compose file: ${composeFile}"

						withEnv(["COMPOSE_FILE=${composeFile}"]) {
							sh '''
								echo "=== Current Working Directory ==="
								pwd
								echo "=== File Listing ==="
								ls -la
								echo "=== Docker Compose Files Check ==="
								if [ -f "docker-compose.uat.yml" ]; then
									echo "✓ docker-compose.uat.yml exists"
								else
									echo "✗ docker-compose.uat.yml missing"
								fi
								echo "=== Key Files Check ==="
								if [ -f "server.js" ]; then
									echo "✓ server.js exists"
								else
									echo "✗ server.js missing"
								fi
								if [ -f "Dockerfile.uat" ]; then
									echo "✓ Dockerfile.uat exists"
								else
									echo "✗ Dockerfile.uat missing"
								fi

								# Create .env file with environment variables
								cat > .env << EOF
								MONGODB_URI=${MONGO_URI}
								PORT=5174
								NODE_ENV=uat
								ADMIN_USERNAME=${ADMIN_USERNAME}
								ADMIN_PASSWORD=${ADMIN_PASSWORD}
								EOF

								# Stop and remove existing survey containers
								docker-compose -f $COMPOSE_FILE down || true

								# Remove only survey-related images
								docker images | grep survey | awk '{print $3}' | xargs -r docker rmi -f || true

								# Clean up only dangling images (not used by any container)
								docker image prune -f

								echo "=== Starting Docker Containers ==="
								echo "Using compose file: $COMPOSE_FILE"

								# Build and start services
								docker-compose -f $COMPOSE_FILE up --build -d

								# Wait for services to start
								sleep 15

								# Check container status
								echo "=== Container Status ==="
								docker-compose -f $COMPOSE_FILE ps

								# Show logs if there are issues
								if ! docker-compose -f $COMPOSE_FILE ps | grep -q "Up"; then
									echo "=== Container Logs ==="
									docker-compose -f $COMPOSE_FILE logs
									exit 1
								fi
							'''
						}
					}
				}
			}
		}
		stage('Health Check') {
			steps {
				echo 'Performing health checks...'
				script {
					sleep 10

					def composeFile = 'docker-compose.uat.yml'

					withEnv(["COMPOSE_FILE=${composeFile}"]) {
						sh '''
						echo "=== Health Check ==="

						# Check container status
						docker-compose -f $COMPOSE_FILE ps

						# Test application on port 5174
						echo "Testing application..."
						if curl -f --connect-timeout 10 --max-time 30 -s http://localhost:5174 >/dev/null 2>&1; then
							echo "✅ Application is accessible on port 5174"
						else
							echo "❌ Application health check failed"
							echo "Container logs:"
							docker-compose -f $COMPOSE_FILE logs --tail 20
							exit 1
						fi

						# Test API endpoint
						if curl -f --connect-timeout 10 --max-time 30 -s http://localhost:5174/api/surveys >/dev/null 2>&1; then
							echo "✅ API endpoint is working"
						else
							echo "⚠️ API endpoint test failed but continuing..."
						fi

						echo "=== Health Check Completed ==="
						'''
					}
				}
			}
		}
	}

		post {
			always {
				echo 'Pipeline completed'
				cleanWs()
			}
			success {
				echo 'Deployment successful!'
				echo 'Access your applications at:'
				echo "  Backend API: http://localhost:5174/api"
				echo "  Client (S3): https://${CLIENT_S3_BUCKET}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com"
				echo "  Super Admin (S3): https://${SUPER_ADMIN_S3_BUCKET}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com"
				echo ""
				echo "UAT environment deployed successfully without CDN."
				// You can add notifications here (Slack, email, etc.)
			}
			failure {
				echo 'Deployment failed!'
				// You can add failure notifications here
			}
		}
}
